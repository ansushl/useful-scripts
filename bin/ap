#!/usr/bin/env bash
# @Function
# convert to Absolute Path.
#
# @Usage
#   # print Absolute Path of current directory.
#   $ ./ap
#   # print Absolute Path of arguments.
#   $ ./ap a.txt ../dir1/b.txt
#
# @online-doc https://github.com/oldratlee/useful-scripts/blob/dev-2.x/docs/shell.md#-ap-and-rp
# @author Jerry Lee (oldratlee at gmail dot com)
set -eEuo pipefail

# NOTE: DO NOT declare var PROG as readonly in ONE line!
PROG=$(basename -- "$0")
readonly PROG
readonly PROG_VERSION='2.6.0-dev'

################################################################################
# util functions
################################################################################

colorPrint() {
  local color=$1
  shift
  # if stdout is a terminal, turn on color output.
  #   '-t' check: is a terminal?
  #   check isatty in bash https://stackoverflow.com/questions/10022323
  if [ -t 1 ]; then
    printf '\e[1;%sm%s\e[0m\n' "$color" "$*"
  else
    printf '%s\n' "$*"
  fi
}

redPrint() {
  colorPrint 31 "$*"
}

die() {
  redPrint "Error: $*" >&2
  exit 1
}

# How can I get the behavior of GNU's readlink -f on a Mac?
# https://stackoverflow.com/questions/1055671
portableReadLink() {
  local file=$1 uname

  uname=$(uname)
  case "$uname" in
  Linux* | CYGWIN* | MINGW*)
    readlink -f -- "$file"
    ;;
  Darwin*)
    local py_args=(-c 'import os, sys; print(os.path.realpath(sys.argv[1]))' "$file")
    if command -v greadlink >/dev/null; then
      greadlink -f -- "$file"
    elif command -v python3 >/dev/null; then
      python3 "${py_args[@]}"
    elif command -v python >/dev/null; then
      python "${py_args[@]}"
    else
      die "fail to find command(greadlink/python3/python) to get absolute path!"
    fi
    ;;
  *)
    die "NOT support uname($uname)!"
    ;;
  esac
}

usage() {
  local -r exit_code=${1:-0}
  (($# > 0)) && shift
  local -r out=$(((exit_code != 0) + 1))

  # NOTE: $'foo' is the escape sequence syntax of bash
  local nl=$'\n' # new line
  (($# > 0)) && redPrint "$*$nl" >&"$out"

  cat >&"$out" <<EOF
Usage: ${PROG} [OPTION]... [FILE]...
convert to Absolute Path.

Example:
  ${PROG} arg1 arg2
  ${PROG} */*.py

Options:
  -h, --help      display this help and exit
  -V, --version   display version information and exit
EOF

  exit "$exit_code"
}

progVersion() {
  printf '%s\n' "$PROG $PROG_VERSION"
  exit
}

################################################################################
# parse options
################################################################################

declare -a files=()
while [ $# -gt 0 ]; do
  case "$1" in
  -h | --help)
    usage
    ;;
  -V | --version)
    progVersion
    ;;
  --)
    shift
    files=(${files[@]:+"${files[@]}"} "$@")
    break
    ;;
  -*)
    usage 2 "${PROG}: unrecognized option '$1'"
    ;;
  *)
    # if not option, treat all follow files as args
    files=(${files[@]:+"${files[@]}"} "$@")
    break
    ;;
  esac
done

# if files is empty, use "."
files=("${files[@]:-.}")
readonly files

################################################################################
# biz logic
################################################################################

has_error=false

for f in "${files[@]}"; do
  if [ -e "$f" ]; then
    portableReadLink "$f"
  else
    redPrint "error: $f does not exists!" >&2
    has_error=true
  fi
done

# set exit status
! $has_error
