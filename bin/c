#!/usr/bin/env bash
# @Function
# Run command and put output to system clipper.
#
# @Usage
#   $ c echo 'hello world!'
#   $ echo 'hello world!' | c
#
# @online-doc https://github.com/oldratlee/useful-scripts/blob/dev-2.x/docs/shell.md#-c
# @author Jerry Lee (oldratlee at gmail dot com)
#
# NOTE about Bash Traps and Pitfalls:
#
# 1. DO NOT combine var declaration and assignment which value supplied by subshell in ONE line!
#    for example: readonly var1=$(echo value1)
#                 local var2=$(echo value1)
#
#    Because the combination make exit code of assignment to be always 0,
#      aka. the exit code of command in subshell is discarded.
#      tested on bash 3.2.57/4.2.46
#
#    solution is separation of var declaration and assignment:
#           var1=$(echo value1)
#           readonly var1
#           local var2
#           var2=$(echo value1)
set -eEuo pipefail

# NOTE: DO NOT declare var PROG as readonly in ONE line!
PROG=$(basename -- "$0")
readonly PROG
readonly PROG_VERSION='2.6.0-dev'

################################################################################
# util functions
################################################################################

printErrorMsg() {
  # if stdout is a terminal, turn on color output.
  #   '-t' check: is a terminal?
  #   check isatty in bash https://stackoverflow.com/questions/10022323
  if [ -t 1 ]; then
    printf '\e[1;31m%s\e[0m\n\n' "Error: $*"
  else
    printf '%s\n\n' "Error: $*"
  fi
}

usage() {
  local -r exit_code=${1:-0}
  (($# > 0)) && shift
  local -r out=$(((exit_code != 0) + 1))

  (($# > 0)) && printErrorMsg "$*" >&"$out"

  cat >&"$out" <<EOF
Usage: ${PROG} [OPTION]... [command [command_args ...]]
Run command and put output to system clipper.
If no command is specified, read from stdin(pipe).

Example:
  ${PROG} echo "hello world!"
  ${PROG} grep -i 'hello world' menu.h main.c
  set | ${PROG}
  ${PROG} -q < ~/.ssh/id_rsa.pub

Options:
  -k, --keep-eol  do not trim new line at end of file
  -q, --quiet     suppress all normal output, default is false
  -h, --help      display this help and exit
  -V, --version   display version information and exit
EOF

  exit "$exit_code"
}

progVersion() {
  printf '%s\n' "$PROG $PROG_VERSION"
  exit
}

################################################################################
# parse options
################################################################################

quiet=false
keep_eol=false
declare -a target_command=()
while [ $# -gt 0 ]; do
  case "$1" in
  -k | --keep-eol)
    keep_eol=true
    shift
    ;;
  -q | --quiet)
    quiet=true
    shift
    ;;
  -h | --help)
    usage
    ;;
  -V | --version)
    progVersion
    ;;
  --)
    shift
    target_command=(${target_command[@]:+"${target_command[@]}"} "$@")
    break
    ;;
  -*)
    usage 2 "unrecognized option '$1'"
    ;;
  *)
    # if not option, treat all follow args as command
    target_command=(${target_command[@]:+"${target_command[@]}"} "$@")
    break
    ;;
  esac
done

readonly keep_eol quiet target_command

################################################################################
# biz logic
################################################################################

copy() {
  case "$(uname)" in
  Darwin*)
    pbcopy
    ;;
  CYGWIN* | MINGW*)
    clip
    ;;
  *)
    xsel -b
    ;;
  esac
}

catThenCopy() {
  local content
  content=$(cat)
  if $keep_eol; then
    printf '%s\n' "$content"
  else
    printf %s "$content"
  fi | copy
}

teeAndCopy() {
  if $quiet; then
    catThenCopy
  else
    tee >(catThenCopy)
  fi
}

if [ ${#target_command[@]} -eq 0 ]; then
  teeAndCopy
else
  "${target_command[@]}" | teeAndCopy
fi
